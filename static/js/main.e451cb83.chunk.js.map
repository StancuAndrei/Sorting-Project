{"version":3,"sources":["sortingAlgorithms/MergeSort.js","sortingAlgorithms/BubbleSort.js","sortingAlgorithms/SelectionSort.js","sortingAlgorithms/QuickSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","merge","getBubbleSortAnimations","auxillaryArray","N","swap","bubbleSort","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIndex","secondIndex","temp","getSelectionSortAnimations","minIndex","selectionSort","getQuickSortAnimations","quickSort","startIndex","endIndex","pivotIndex","pivot","partitionArray","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","parseInt","key","insertionSort","getInsertionSortAnimations","className","map","value","idx","onClick","mergeSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e451cb83.chunk.js","sourcesContent":["export function getMergeSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray, startIdx, endIdx, auxiliaryArray, animations\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction merge(\r\n    mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}","export function getBubbleSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    bubbleSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        for (let j = 0; j < N - i - 1; j++) {\r\n            animations.push([j, j + 1]);\r\n            animations.push([j, j + 1]);\r\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\r\n                animations.push([j, auxillaryArray[j + 1]]);\r\n                animations.push([j + 1, auxillaryArray[j]]);\r\n                swap(auxillaryArray, j, j + 1);\r\n            } else {\r\n                animations.push([-1, -1]);\r\n                animations.push([-1, -1]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","export function getSelectionSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    selectionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction selectionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        let minIndex = i; //Finding minimum element in unsorted array\r\n        for (let j = i + 1; j < N; j++) {\r\n            animations.push([\"comparision1\", j, minIndex]);\r\n            animations.push([\"comparision2\", j, minIndex]);\r\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\r\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\r\n        // Swap the found minimum element with the first element\r\n        swap(auxillaryArray, minIndex, i);\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","export function getQuickSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\ngetQuickSortAnimations([7, 2, 1, 6]);\r\n\r\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\r\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivot = auxillaryArray[endIndex];\r\n    let pivotIndex = startIndex;\r\n    for (let i = startIndex; i <= endIndex - 1; i++) {\r\n        animations.push([i, endIndex]);\r\n        animations.push([i, endIndex]);\r\n        if (auxillaryArray[i] <= pivot) {\r\n            //Swap these two heights\r\n            animations.push([i, auxillaryArray[pivotIndex]]);\r\n            animations.push([pivotIndex, auxillaryArray[i]]);\r\n            swap(auxillaryArray, i, pivotIndex);\r\n            pivotIndex++;\r\n        } else {\r\n            animations.push([-1, -1]);\r\n            animations.push([-1, -1]);\r\n        }\r\n        animations.push([-1, -1]);\r\n        animations.push([-1, -1]);\r\n    }\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    //Swap these two heights\r\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\r\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\r\n    swap(auxillaryArray, pivotIndex, endIndex);\r\n    return pivotIndex;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","import React from 'react';\r\nimport {getMergeSort} from '../sortingAlgorithms/MergeSort.js'\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/BubbleSort.js'\r\nimport {getSelectionSortAnimations} from '../sortingAlgorithms/SelectionSort.js'\r\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/InsertionSort.js'\r\nimport {getQuickSortAnimations} from '../sortingAlgorithms/QuickSort.js'\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 200;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        for(let i=0;i<NUMBER_OF_ARRAY_BARS;i++){\r\n            array.push(randomIntFromInterval(5,680))\r\n        }\r\n        this.setState({array})\r\n    }\r\n    mergeSort(){\r\n        const animations = getMergeSort(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n    }\r\n\r\n    quickSort(){\r\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length - 1; i++) {\r\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                if(barOneIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n\r\n    }\r\n\r\n    insertionSort(){\r\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n\r\n    }\r\n\r\n    selectionSort(){\r\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n\r\n    }\r\n\r\n    bubbleSort(){\r\n\r\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        // const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n        // setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\r\n    }\r\n\r\n\r\n\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n        return(\r\n            <div className=\"array-container\">\r\n            {array.map((value,idx) => (\r\n                <div\r\n                className=\"array-bar\"\r\n                 key={idx}\r\n                 style={{height: `${value}px`}}\r\n                 ></div>\r\n            ))}\r\n            <br></br>\r\n            <button onClick={() => this.resetArray()}>Reset Array</button>\r\n            <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n            <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n            <button onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n            <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n            <button onClick={() => this.selectionSort()}>Selection Sort</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max){\r\n    return Math.floor(Math.random() * (max-min+1) + min);\r\n}\r\n\r\nfunction arrayAreEqual(arrayOne,ArrayTwo){\r\n    if(arrayOne.length !== ArrayTwo.length) return false;\r\n    for(let i=0;i<arrayOne.length;i++){\r\n        if(arrayOne[i] !== ArrayTwo[i]) return false;\r\n    }\r\n    return true;\r\n}","export function getInsertionSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    insertionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 1; i < N; i++) {\r\n        let key = auxillaryArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n        while (j >= 0 && auxillaryArray[j] > key) {\r\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n            auxillaryArray[j + 1] = auxillaryArray[j];\r\n            j = j - 1;\r\n            if (j >= 0) {\r\n                animations.push([\"comparision1\", j, i]);\r\n                animations.push([\"comparision2\", j, i]);\r\n            }\r\n        }\r\n        animations.push([\"overwrite\", j + 1, key]);\r\n        auxillaryArray[j + 1] = key;\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.jsx'\nimport './App.css';\n\nfunction App() {\n    return ( <\n        div className = \"App\" >\n        <\n        SortingVisualizer > < /SortingVisualizer> <\n        /div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}